`timescale 1ns/10ps
module new_datapath_tb;

	reg HIin, HIout, LOin, LOout, PCin, PCout, IRin, Zin, Zhiout, Zloout, Yin, MARin, MDRin, MDRout, Read, Clock, GlobalReset, write;
	reg Gra, Grb, Grc, Rout, Rin, BAout, s_d_en, CONin, CONout, OUT_portin, Strobe, IN_portout, Cout;
	reg [4:0] ALUControl;
	
	wire Zero;
	wire [31:0] R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15;
	wire [31:0] HI, LO, IR, PC, BusMuxOut, Y;
	wire [63:0] Z;
	
	reg second;

	initial begin
		 second = 1'b1;
	end

	parameter  Default = 4'b0000, T0 = 4'b0111, T1 = 4'b1000, T2 = 4'b1001, T3 = 4'b1010, 
	           T4 = 4'b1011, T5 = 4'b1100, T6 = 4'b1101, T7 = 4'b1110, T8 = 4'b1111;
   reg  [3:0] Present_State = Default; 
	
	new_datapath DUT(
		  .HIin(HIin), .HIout(HIout), .LOin(LOin), .LOout(LOout), .PCin(PCin), .PCout(PCout), 
		  .IRin(IRin), .Zin(Zin), .Zhiout(Zhiout), .Zloout(Zloout), .Yin(Yin), .MARin(MARin), 
		  .MDRin(MDRin), .MDRout(MDRout), .Read(Read), .Clock(Clock), .GlobalReset(GlobalReset),
		  .ALUControl(ALUControl),
		  .Zero(Zero), .R0(R0), .R1(R1), .R2(R2), .R3(R3), .HI(HI), .LO(LO), .IR(IR), .PC(PC), .BusMuxOut(BusMuxOut), .Z(Z), .Y(Y),
		  .R4(R4), .R5(R5), .R6(R6), .R7(R7), .R8(R8), .R9(R9), .R10(R10), .R11(R11), .R12(R12), .R13(R13), .R14(R14), .R15(R15),
		  .Cout(Cout), .write(write), .Gra(Gra), .Grb(Grb), .Grc(Grc), .Rout(Rout), .Rin(Rin), .BAout(BAout), .s_d_en(s_d_en), 
		  .CONin(CONin), .CONout(CONout), .OUT_portin(OUT_portin), .Strobe(Strobe), .IN_portout(IN_portout)
	);

	initial begin
		Clock = 0;
		forever #10 Clock = ~Clock;
	end
	
	always@(posedge Clock)
		begin
			case(Present_State)
				Default : Present_State = T0;
				T0 : Present_State = T1;
				T1 : Present_State = T2;
				T2 : Present_State = T3;
				T3 : Present_State = T4;
				T4 : Present_State = T5;
				T5 : Present_State = T6;
				T6 : Present_State = T7;
				T7 : Present_State = T8;
				default : Present_State = Default;
			endcase
	end
	
always @(Present_State) begin
    case (Present_State)
        Default: begin
            HIin<=0; HIout<=0; LOin<=0; LOout<=0; PCin<=0; PCout<=0; 
            IRin<=0; Zin<=0; Zhiout<=0; Zloout<=0; Yin<=0; MARin<=0; MDRin<=0; MDRout<=0; Read<=0; Clock<=0; GlobalReset<=0;
            Cout<=0; IN_portout<=0;
            Gra<=0; Grb<=0; Grc<=0; Rout<=0; BAout<=0; Rin<=0;
            s_d_en<=1; CONin<=0; CONout<=0; OUT_portin<=0; Strobe<=0;
            write<=0;
        end

        // Instruction execution steps
        T0: begin
            if (second) begin
                PCout <= 1; MARin <= 1; PCin <= 1;
                #15 PCout <= 0; MARin <= 0; PCin <= 0;
            end else begin
                PCout <= 1; MARin <= 1; PCin <= 1;
                #15 PCout <= 0; PCin <= 0;
            end
        end
        T1: begin
            if (second) begin
                Read <= 1; MDRin <= 1;   
                #15 Read <= 0; MDRin <= 0;
            end else begin
                #15 MARin <= 0;
            end
        end
        T2: begin
            if (second) begin
                MDRout <= 1; IRin <= 1; 
                #15 MDRout <= 0; IRin <= 0; 
            end else begin
                Read <= 1; MDRin <= 1;   
                #15 Read <= 0; MDRin <= 0;
            end
        end
        T3: begin
            if (second) begin
                Grb <= 1; BAout <= 1; Yin <= 1;
                #15 Grb <= 0; BAout <= 0; Yin <= 0;
            end else begin
                MDRout <= 1; IRin <= 1;
                #15 MDRout <= 0; IRin <= 0; 
            end
        end
        T4: begin
            if (second) begin
                Cout <= 1; ALUControl <= 5'b00110; Zin <= 1;  // <-- ALUControl changed to OR operation (assuming 5'b00110 = OR)
                #15 Cout <= 0; Zin <= 0;
            end else begin
                Grb <= 1; BAout <= 1; Yin <= 1; 
                #15 Grb <= 0; BAout <= 0; Yin <= 0; 
            end
        end
        T5: begin
            if (second) begin
                Zloout <= 1; MARin <= 1;   
                #15 Zloout <= 0; MARin <= 0;
            end else begin
                Cout <= 1; ALUControl <= 5'b00110; Zin <= 1;  // Again for the ALU OR
                #15 Zin <= 0; Cout <= 0;
            end
        end
        T6: begin
            if (second) begin
                Read <= 1; MDRin <= 1; 
            end else begin
                Zloout <= 1; Gra <= 1; Rin <= 1; 
                #15 Zloout <= 0; Gra <= 0; Rin <= 0;
            end
        end
        T7: begin
            if (second) begin
                #15 Read <= 0; MDRin <= 0;
            end
        end
        T8: begin
            if (second) begin
                MDRout <= 1; Gra <= 1; Rin <= 1;   
                #15 MDRout <= 0; Gra <= 0; Rin <= 0; 
            end
            second <= 0;
        end

        default: begin
            Present_State = Default;
        end
    endcase
end

endmodule
